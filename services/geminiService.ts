import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // This is a fallback for development. In a real environment, the key should be set.
  console.warn("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const getMimeType = (base64: string): string | null => {
  const match = base64.match(/^data:(image\/[a-z]+);base64,/);
  return match ? match[1] : 'image/jpeg'; // Default to jpeg if not found
}

const cleanBase64 = (base64: string): string => {
  return base64.replace(/^data:image\/[a-z]+;base64,/, '');
}

export const generateHugImage = async (childPhotoBase64: string, currentPhotoBase64: string): Promise<string> => {
  const childMimeType = getMimeType(childPhotoBase64);
  const currentMimeType = getMimeType(currentPhotoBase64);

  if (!childMimeType || !currentMimeType) {
    throw new Error('Could not determine image mime type.');
  }

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: cleanBase64(childPhotoBase64),
              mimeType: childMimeType,
            },
          },
          {
            inlineData: {
              data: cleanBase64(currentPhotoBase64),
              mimeType: currentMimeType,
            },
          },
          {
            text: 'Generate an ultra-realistic, emotional, and heartwarming photograph. The photograph must show the person from the first photo (a child) and the person from the second photo (the same person as an adult) hugging each other tenderly. The final image should look like a real, high-resolution photograph, capturing a moment of profound self-reunion. Maintain the distinct features and identities from both source photos. The lighting should be soft and natural, enhancing the emotional depth. The background should be subtle and out-of-focus, ensuring the focus remains entirely on the two figures embracing.',
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:image/png;base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("The AI model failed to generate an image. Please check your photos and try again.");
  }
};